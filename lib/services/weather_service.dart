import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import '../config/app_config.dart';
import '../models/weather_model.dart';
import '../utils/database_helper.dart';
import 'location_service.dart';

class WeatherService {
  static final WeatherService _instance = WeatherService._internal();
  factory WeatherService() => _instance;
  WeatherService._internal();

  final LocationService _locationService = LocationService();
  final DatabaseHelper _databaseHelper = DatabaseHelper();

  // Cache en m√©moire pour √©viter les appels r√©p√©t√©s
  Weather? _cachedWeather;
  DateTime? _lastFetchTime;

  /// Obtenir la m√©t√©o pour la position actuelle
  Future<WeatherResult> getCurrentWeather({
    bool forceRefresh = false,
  }) async {
    try {
      // V√©rifier le cache en m√©moire
      if (!forceRefresh && _isMemoryCacheValid()) {
        return WeatherResult.success(_cachedWeather!);
      }

      // V√©rifier le cache de la base de donn√©es
      if (!forceRefresh) {
        final cachedWeather = await _getCachedWeatherFromDb();
        if (cachedWeather != null) {
          _cachedWeather = cachedWeather;
          _lastFetchTime = cachedWeather.lastUpdated;
          return WeatherResult.success(cachedWeather);
        }
      }

      // Obtenir la position actuelle
      final locationResult = await _locationService.getCurrentPosition();
      if (!locationResult.isSuccess) {
        return WeatherResult.error(
            'Impossible d\'obtenir la position: ${locationResult.error}');
      }

      final position = locationResult.position!;

      // Faire l'appel √† l'API m√©t√©o
      final weather = await _fetchWeatherFromApi(
        latitude: position.latitude,
        longitude: position.longitude,
      );

      if (weather != null) {
        // Mettre √† jour les caches
        _cachedWeather = weather;
        _lastFetchTime = DateTime.now();
        await _saveWeatherToDb(weather);

        return WeatherResult.success(weather);
      } else {
        return WeatherResult.error('Impossible de r√©cup√©rer les donn√©es m√©t√©o');
      }
    } catch (e) {
      print('Erreur lors de la r√©cup√©ration de la m√©t√©o: $e');

      // En cas d'erreur, essayer de retourner les donn√©es mises en cache
      final cachedWeather = await _getCachedWeatherFromDb();
      if (cachedWeather != null) {
        return WeatherResult.success(cachedWeather);
      }

      return WeatherResult.error('Erreur m√©t√©o: ${e.toString()}');
    }
  }

  /// Obtenir la m√©t√©o pour des coordonn√©es sp√©cifiques
  Future<WeatherResult> getWeatherForLocation({
    required double latitude,
    required double longitude,
    bool useCache = true,
  }) async {
    try {
      // Si on autorise le cache et que la position est proche de la derni√®re
      if (useCache && _isLocationSimilar(latitude, longitude)) {
        if (_isMemoryCacheValid()) {
          return WeatherResult.success(_cachedWeather!);
        }
      }

      final weather = await _fetchWeatherFromApi(
        latitude: latitude,
        longitude: longitude,
      );

      if (weather != null) {
        _cachedWeather = weather;
        _lastFetchTime = DateTime.now();
        await _saveWeatherToDb(weather);

        return WeatherResult.success(weather);
      } else {
        return WeatherResult.error('Impossible de r√©cup√©rer les donn√©es m√©t√©o');
      }
    } catch (e) {
      print('Erreur lors de la r√©cup√©ration de la m√©t√©o: $e');
      return WeatherResult.error('Erreur m√©t√©o: ${e.toString()}');
    }
  }

  /// R√©cup√©rer les donn√©es m√©t√©o depuis l'API
  Future<Weather?> _fetchWeatherFromApi({
    required double latitude,
    required double longitude,
  }) async {
    try {
      // Construire l'URL de l'API OpenWeatherMap
      final uri = Uri.parse(AppConfig.weatherBaseUrl).replace(queryParameters: {
        'lat': latitude.toString(),
        'lon': longitude.toString(),
        'appid': AppConfig.weatherApiKey,
        'units': 'metric', // Pour avoir la temp√©rature en Celsius
        'lang': 'fr', // Descriptions en fran√ßais
      });

      print('Appel API m√©t√©o: $uri');

      final response = await http.get(uri).timeout(
            const Duration(seconds: 10),
          );

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return Weather.fromJson(data);
      } else {
        print('Erreur API m√©t√©o: ${response.statusCode} - ${response.body}');
        return null;
      }
    } on SocketException {
      print('Pas de connexion internet pour la m√©t√©o');
      return null;
    } on HttpException {
      print('Erreur HTTP lors de l\'appel m√©t√©o');
      return null;
    } catch (e) {
      print('Erreur lors de l\'appel API m√©t√©o: $e');
      return null;
    }
  }

  /// R√©cup√©rer la m√©t√©o depuis le cache de la base de donn√©es
  Future<Weather?> _getCachedWeatherFromDb() async {
    try {
      final weather = await _databaseHelper.getLatestWeather();

      if (weather != null && weather.isDataFresh) {
        return weather;
      }

      return null;
    } catch (e) {
      print('Erreur lors de la r√©cup√©ration du cache m√©t√©o: $e');
      return null;
    }
  }

  /// Sauvegarder la m√©t√©o dans la base de donn√©es
  Future<void> _saveWeatherToDb(Weather weather) async {
    try {
      await _databaseHelper.insertWeather(weather);
    } catch (e) {
      print('Erreur lors de la sauvegarde de la m√©t√©o: $e');
    }
  }

  /// V√©rifier si le cache en m√©moire est valide
  bool _isMemoryCacheValid() {
    if (_cachedWeather == null || _lastFetchTime == null) {
      return false;
    }

    final now = DateTime.now();
    return now.difference(_lastFetchTime!) < AppConfig.weatherCacheTimeout;
  }

  /// V√©rifier si la position est similaire √† la derni√®re position mise en cache
  bool _isLocationSimilar(double latitude, double longitude) {
    if (_cachedWeather == null) return false;

    // Note: Pour une impl√©mentation compl√®te, il faudrait stocker
    // les coordonn√©es dans le mod√®le Weather
    // Pour l'instant, on retourne false pour forcer la v√©rification
    return false;
  }

  /// Obtenir une description m√©t√©o simple bas√©e sur la temp√©rature
  String getWeatherDescription(double temperature) {
    if (temperature >= 30) {
      return 'Tr√®s chaud';
    } else if (temperature >= 25) {
      return 'Chaud';
    } else if (temperature >= 20) {
      return 'Agr√©able';
    } else if (temperature >= 15) {
      return 'Frais';
    } else if (temperature >= 10) {
      return 'Froid';
    } else {
      return 'Tr√®s froid';
    }
  }

  /// Obtenir l'ic√¥ne recommand√©e bas√©e sur la temp√©rature
  String getTemperatureIcon(double temperature) {
    if (temperature >= 25) {
      return '‚òÄÔ∏è';
    } else if (temperature >= 15) {
      return 'üå§Ô∏è';
    } else if (temperature >= 5) {
      return '‚òÅÔ∏è';
    } else {
      return '‚ùÑÔ∏è';
    }
  }

  /// Obtenir les informations du cache pour debug
  Map<String, dynamic> getCacheInfo() {
    return {
      'has_memory_cache': _cachedWeather != null,
      'memory_cache_age_minutes': _lastFetchTime != null
          ? DateTime.now().difference(_lastFetchTime!).inMinutes
          : null,
      'memory_cache_valid': _isMemoryCacheValid(),
      'last_location': _cachedWeather?.location,
      'last_temperature': _cachedWeather?.temperature,
    };
  }

  /// Nettoyer tous les caches
  Future<void> clearCache() async {
    _cachedWeather = null;
    _lastFetchTime = null;

    try {
      // Optionnel: Nettoyer aussi la base de donn√©es
      // await _databaseHelper.clearWeatherCache();
    } catch (e) {
      print('Erreur lors du nettoyage du cache m√©t√©o: $e');
    }
  }

  /// V√©rifier si l'API m√©t√©o est configur√©e
  bool isApiConfigured() {
    return AppConfig.weatherApiKey.isNotEmpty &&
        AppConfig.weatherApiKey != 'YOUR_WEATHER_API_KEY';
  }

  /// Obtenir des donn√©es m√©t√©o de test (pour d√©veloppement)
  Weather getTestWeather() {
    return Weather(
      temperature: 22.5,
      description: 'Ensoleill√©',
      location: 'Dakar, SN',
      lastUpdated: DateTime.now(),
      icon: '01d',
    );
  }
}

/// Classe pour encapsuler les r√©sultats m√©t√©o
class WeatherResult {
  final bool isSuccess;
  final Weather? weather;
  final String? error;

  WeatherResult._({
    required this.isSuccess,
    this.weather,
    this.error,
  });

  factory WeatherResult.success(Weather weather) {
    return WeatherResult._(
      isSuccess: true,
      weather: weather,
    );
  }

  factory WeatherResult.error(String error) {
    return WeatherResult._(
      isSuccess: false,
      error: error,
    );
  }

  @override
  String toString() {
    if (isSuccess) {
      return 'WeatherResult.success(${weather?.temperatureDisplay} at ${weather?.location})';
    } else {
      return 'WeatherResult.error($error)';
    }
  }
}
